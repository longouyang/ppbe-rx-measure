knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(plyr)
library(tidyverse)
library(lubridate)
library(memoise)
generic.ci_ <- function(x, n = 5000, seed = 1) {
set.seed(seed)
lenx = length(x)
structure(
quantile(
replicate(n, mean(x[sample.int(lenx, replace = TRUE)])),
c(0.025, 0.975)),
names=c("ci.l","ci.u"))
}
generic.ci <- memoise(generic.ci_)
results.dir = "production-results/"
assignments = read_csv(paste0(results.dir, "assignments.csv")) %>%
mutate(accept.time = ymd_hms(accept.time),
submit.time = ymd_hms(submit.time),
duration = difftime(submit.time, accept.time, units = "mins"))
gloss = read_csv(paste0(results.dir,"gloss.csv"))
gen = read_csv(paste0(results.dir, "generalization.csv"),
col_types = cols(string = col_character()))
## arrange assignments in order of time
assignments = assignments %>% arrange(accept.time)
regexes = c('3a' = 'aaa+',
'zip-code' = '[0123456789]{5}',
'suffix-s' = '.*s\\>',
'delimiters' = "\\[.*\\]")
example.matches = function(example, rx) {
res = regexpr(pattern = rx, text = example)
# make sure we match and that the *entire* string is what matches, not a substring
res > 0 & attr(res, "match.length") == nchar(example)
}
# example.correct(example = 'aaa', rx = 'aaa+')
# example.correct(example = 'baaa', rx = 'aaa+')
# example.correct(example = 'aaaa', rx = 'aaa+')
# # testing
# View(responses %>% select(rule.id, polarity, string, correct, match) %>% arrange(rule.id, polarity))
qplot(data = assignments,
x = as.numeric(duration),
binwidth = 1,
color = I('white')) +
xlab("duration (minutes)")
e = gen %>%
group_by(rule.id, seq.id, worker.id) %>%
summarise(score = mean(correct)) %>%
group_by(rule.id, seq.id) %>%
summarise(mean.score = mean(score),
ci.l.score = generic.ci(score)['ci.l'],
ci.u.score = generic.ci(score)['ci.u'],
n = length(score)
)
qplot(data = e,
x = seq.id,
y = mean.score,
ymin = ci.l.score,
ymax = ci.u.score,
geom = 'pointrange'
) +
geom_text(mapping = aes(label = paste0('n = ',n), y = 0.05), size = 3) +
facet_grid(. ~ rule.id, scales = 'free') + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 25, hjust = 1))
e = gen %>%
group_by(rule.id, seq.id, worker.id) %>%
summarise(score = mean(correct)) %>%
group_by(rule.id, seq.id) %>%
summarise(mean.score = mean(score),
ci.l.score = generic.ci(score)['ci.l'],
ci.u.score = generic.ci(score)['ci.u'],
n = length(score)
) %>%
transform(ci.l.score = ifelse(n == 1, 0, ci.l.score),
ci.u.score = ifelse(n == 1, 1, ci.u.score)
)
qplot(data = e,
x = seq.id,
y = mean.score,
ymin = ci.l.score,
ymax = ci.u.score,
geom = 'pointrange'
) +
geom_text(mapping = aes(label = paste0('n = ',n), y = 0.05), size = 3) +
facet_grid(. ~ rule.id, scales = 'free') + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 25, hjust = 1))
score.by.stim = gen %>%
group_by(rule.id, seq.id, string) %>%
summarise(mean.score = mean(correct),
ci.l.score = generic.ci(correct)['ci.l'],
ci.u.score = generic.ci(correct)['ci.u'],
n = length(correct)
)
x.order = score.by.stim %>%
filter(rule.id == '3a') %>%
group_by(string) %>%
summarise(mean.score = mean(mean.score)) %>%
arrange(mean.score) %>%
{.$string}
e = score.by.stim %>% filter(rule.id == '3a')
e$order = match(e$string, x.order)
ggplot(data = e) +
geom_point(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
geom_line(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
scale_x_continuous(breaks = 1:length(x.order), labels = x.order) +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
x.order = score.by.stim %>%
filter(rule.id == 'zip-code') %>%
group_by(string) %>%
summarise(mean.score = mean(mean.score)) %>%
arrange(mean.score) %>%
{.$string}
e = score.by.stim %>% filter(rule.id == 'zip-code')
e$order = match(e$string, x.order)
ggplot(data = e) +
geom_point(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
geom_line(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
scale_x_continuous(breaks = 1:length(x.order), labels = x.order) +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
x.order = score.by.stim %>%
filter(rule.id == 'suffix-s') %>%
group_by(string) %>%
summarise(mean.score = mean(mean.score)) %>%
arrange(mean.score) %>%
{.$string}
e = score.by.stim %>% filter(rule.id == 'suffix-s')
e$order = match(e$string, x.order)
ggplot(data = e) +
geom_point(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
geom_line(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
scale_x_continuous(breaks = 1:length(x.order), labels = x.order) +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
x.order = score.by.stim %>%
filter(rule.id == 'delimiters') %>%
group_by(string) %>%
summarise(mean.score = mean(mean.score)) %>%
arrange(mean.score) %>%
{.$string}
e = score.by.stim %>% filter(rule.id == 'delimiters')
e$order = match(e$string, x.order)
ggplot(data = e) +
geom_point(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
geom_line(mapping = aes(x = order, y = mean.score, group = seq.id, color = seq.id)) +
scale_x_continuous(breaks = 1:length(x.order), labels = x.order) +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
responses %>% select(seq.id) %>% distinct
gen %>% select(seq.id) %>% distinct()
gen %>% select(worker.id, rule.id, seq.id) %>% distinct
?sample
